name: Continuous Integration and Delivery

on: [ push ]

env:
  IMAGE: ghcr.io/${{ github.repository }}/summarizer
  USER: fast_app

jobs:
  build:
    name: Build Docker Image
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Log in to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push builder Image
        uses: docker/build-push-action@v5
        with:
          context: ./fast_project
          file: ./fast_project/Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE }}-builder:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}-builder:latest
          cache-to: type=inline

      - name: Build and push final Image
        uses: docker/build-push-action@v5
        with:
          context: ./fast_project
          file: ./fast_project/Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE }}-final:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}-final:latest
          cache-to: type=inline

  test:
    name: Test docker Image
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Log in to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push builder Image
        uses: docker/build-push-action@v5
        with:
          context: ./fast_project
          file: ./fast_project/Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE }}-builder:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}-builder:latest
          cache-to: type=inline

      - name: Build and push final Image
        uses: docker/build-push-action@v5
        with:
          context: ./fast_project
          file: ./fast_project/Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE }}-final:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}-final:latest
          cache-to: type=inline

      - name: Run container
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}-final:latest

      - name: Install requirements
        run: docker exec fastapi-tdd pip install black==24.4.0 flake8==7.0.0 isort==5.13.2 pytest==8.1.1

      - name: Pytest
        run: docker exec fastapi-tdd python -m pytest .

      - name: Flake8
        run: docker exec fastapi-tdd python -m flake8 .

      - name: Black
        run: docker exec fastapi-tdd python -m black . --check

      - name: isort
        run: docker exec fastapi-tdd python -m isort . --check-only

      - name: Ruff
        uses: chartboost/ruff-action@v1
        with:
          args: 'format --check'

      - name: Upload Test Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}
  deploy:
    name: Deploy package
    permissions: write-all
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: summarizer
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: test-results
          path: .

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5.0.0

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: .

      - id: deployment
        uses: actions/deploy-pages@v4
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ deploy, test ]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false